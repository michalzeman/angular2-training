akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  #log-config-on-start = on

  # Logging of Dead Letters
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on

  actor {
    //provider = "akka.cluster.ClusterActorRefProvider"

    default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
      throughput = 4
    }

    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = on
    }

    deployment {
      /dataSourceSupervisor/dataSource {
        router = round-robin-pool
        nr-of-instances = 2
      }
    }
  }

  remote {
    # The port clients should connect to. Default is 2552.
    netty.tcp.port = 4711
  }

  # JDBC cofniguration for PostreSQL DB
  dataSource {
    driver = "org.postgresql.Driver"
    schema = "akkademo"
    connection.url = """jdbc:postgresql://localhost:5432/postgres"""
    connection.url = ${?VALUE}
    #dataSourceClassName = "org.postgresql.ds.PGSimpleDataSource"
    dataSourceClassName="org.postgresql.ds.PGSimpleDataSource"
    user=${?VALUE}
    password=${?VALUE}
    databaseName=${?VALUE}
    portNumber=5432
    portNumber=${?VALUE}
    serverName="localhost"
    serverName=${?VALUE}
    maximumPoolSize=30
    minimumIdle=10
    maxLifetime=30
    autoCommit=false
    connectionTimeout = 10
    validationTimeout = 5
  }

  dataSource-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2
      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0
      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 5
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 1
  }

}

http {
  interface="0.0.0.0"
  port = 8080
  port = ${?PORT}
}

